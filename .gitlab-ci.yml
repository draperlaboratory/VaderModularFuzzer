---
include:
  - remote: 'https://gitlab-draper.pages.draper.com/utilities/container-image-builder/template.gitlab-ci.yml'

stages:
  - build:container-image
  - build
  - unit-test
  - multi-test
  - documentation

.limited-run-rules:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /^(\[Draft\]|\(Draft\)|Draft:)/
      when: never
    - if: $CI_COMMIT_BRANCH == 'master'

.master-rules:
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'

.build:
  script:
    - mkdir build-${BUILD}
    - cd build-${BUILD}
    - |
      if [[ ${BUILD} == *"clang"* ]] 
      then
        cmake -DCMAKE_CXX_COMPILER=clang++ ..
      else
        cmake -DCMAKE_CXX_COMPILER=g++ ..
      fi
    - make -j 8 install

build:
  stage: build
  extends: [.build]
  tags: [docker]
  image:
    name: registry.draper.com/vader-public/vader/staging:${IMAGE}
  parallel:
    matrix:
      - BUILD: [gcc-u22, clang-u22]
        IMAGE: [ubuntu-22.04]
  artifacts:
    paths:
      - "build-${BUILD}"

build-all-others:
  stage: build
  extends: [ .limited-run-rules, .build ]
  tags: [docker]
  image:
    name: registry.draper.com/vader-public/vader/prereqs_vmf:${IMAGE}
  parallel:
    matrix:
      - IMAGE: [centos8]
        BUILD: [gcc-centos8, clang-centos8]
      - IMAGE: [centos9]
        BUILD: [gcc-centos9, clang-centos9]
      - IMAGE: [kali-latest]
        BUILD: [gcc-kali, clang-kali]
      - IMAGE: [klee-latest]
        BUILD: [gcc-klee, clang-klee]
      - IMAGE: [oracle8]
        BUILD: [gcc-oracle8, clang-oracle8]
      - IMAGE: [oracle9]
        BUILD: [gcc-oracle9, clang-oracle9]
      - IMAGE: [redhat8]
        BUILD: [gcc-redhat8, clang-redhat8]
      - IMAGE: [oracle9]
        BUILD: [gcc-redhat9, clang-redhat9]
      - IMAGE: [ubuntu-20.04]
        BUILD: [gcc-u20, clang-u20]
      - BUILD: [gcc-u22, clang-u22]
        IMAGE: [ubuntu-22.04]
  artifacts:
    paths:
      - "build-${BUILD}"

build-windows:
  stage: build
  tags: [windows-22H2]
  script:
    - "& 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\Tools\\Launch-VsDevShell.ps1'"
    - mkdir build-windows-22H2
    - cd build-windows-22H2
    - cmake -G "Visual Studio 17 2022" ..
    - cmake --build . --target INSTALL --config Release
    - Write-Output "Installed VMF ..."
    - cd ..
  artifacts:
    when: always
    paths:
      - 'build-*'

.unit-test:
  script:
    - cd build-${BUILD}/
    - ctest --output-on-failure

unit-test: 
  stage: unit-test
  extends: [.unit-test]
  tags: [docker]
  image:
    name: registry.draper.com/vader-public/vader/staging:${IMAGE}
  parallel:
    matrix:
      - IMAGE: [ubuntu-22.04]
        BUILD: [gcc-u22, clang-u22]
  allow_failure: true

unit-test-windows: 
  stage: unit-test
  script:
    - "& 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\Tools\\Launch-VsDevShell.ps1'"
    - cd build-${BUILD}/
    - ctest --output-on-failure
  tags: [windows-22H2]
  parallel:
    matrix:
      - IMAGE: [windows-22H2]
        BUILD: [windows-22H2]
  allow_failure: true

unit-test-all-others: 
  stage: unit-test
  extends: [ .limited-run-rules, .unit-test ]
  tags: [docker]
  image:
    name: registry.draper.com/vader-public/vader/prereqs_vmf:${IMAGE}
  parallel:
    matrix:
      - IMAGE: [centos8]
        BUILD: [gcc-centos8, clang-centos8]
      - IMAGE: [centos9]
        BUILD: [gcc-centos9, clang-centos9]
      - IMAGE: [kali-latest]
        BUILD: [gcc-kali, clang-kali]
      - IMAGE: [klee-latest]
        BUILD: [gcc-klee, clang-klee]
      - IMAGE: [oracle8]
        BUILD: [gcc-oracle8, clang-oracle8]
      - IMAGE: [oracle9]
        BUILD: [gcc-oracle9, clang-oracle9]
      - IMAGE: [redhat8]
        BUILD: [gcc-redhat8, clang-redhat8]
      - IMAGE: [redhat9]
        BUILD: [gcc-redhat9, clang-redhat9]
      - IMAGE: [ubuntu-20.04]
        BUILD: [gcc-u20, clang-u20]
      - IMAGE: [ubuntu-22.04]
        BUILD: [gcc-u22, clang-u22]
  allow_failure: true

.multi-test:
  script:
    # Rename Build
    - mv build-${BUILD} build
    # Move Vader Repo into /tmp/vader_mount/ (or restructure multi_test.sh directory structure)
    - mkdir -p /tmp/vader_mount/vader/
    - mv * /tmp/vader_mount/vader/
    # Clone Targets Repo
    - cd /tmp/vader_mount
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.draper.com/vader-public/targets.git
    # Run Targets Multi_Test.sh with -d flag to set AFLForkserverExecutor.enableCoreDumpCheck to false
    - chmod +x targets/platform_test/multi_test.sh
    - targets/platform_test/multi_test.sh -d

multi-test: 
  stage: multi-test
  extends: [.multi-test]
  tags: [docker]
  image:
    name: registry.draper.com/vader-public/vader/staging:ubuntu-22.04
  parallel:
    matrix:
      - IMAGE: [ubuntu:22]
        BUILD: [clang-u22]
  allow_failure: true

multi-test-all-others: 
  stage: multi-test
  extends: [ .limited-run-rules, .multi-test ]
  tags: [ docker ]
  image: 
    name: registry.draper.com/vader-public/vader/prereqs_vmf:${IMAGE}
  parallel:
    matrix:
      - IMAGE: [centos8]
        BUILD: [gcc-centos8, clang-centos8]
      - IMAGE: [centos9]
        BUILD: [gcc-centos9, clang-centos9]
      - IMAGE: [kali-latest]
        BUILD: [gcc-kali, clang-kali]
      - IMAGE: [klee-latest]
        BUILD: [gcc-klee, clang-klee]
      - IMAGE: [oracle8]
        BUILD: [gcc-oracle8, clang-oracle8]
      - IMAGE: [oracle9]
        BUILD: [gcc-oracle9, clang-oracle9]
      - IMAGE: [redhat8]
        BUILD: [gcc-redhat8, clang-redhat8]
      - IMAGE: [redhat9]
        BUILD: [gcc-redhat9, clang-redhat9]
      - IMAGE: [ubuntu-20.04]
        BUILD: [gcc-u20, clang-u20]
      - IMAGE: [ubuntu-22.04]
        BUILD: [gcc-u22, clang-u22]
  allow_failure: true
  
pages-test:
  stage: documentation
  tags: [ docker ]
  image: 
    name: registry.draper.com/swf/images/oci/extended/doxygen/ubuntu-20.04:1.10.0
  script: 
    - cd docs/doxygen
    - doxygen ./Doxyfile.in
    - mv ./html ./public/
    - mv ./latex ./public/latex
    - mv ../img  ./public/img
    - mv ../coremodules ./public/coremodules
    - mv ./public ../../
  artifacts:
    paths:
    - public  

pages:
  extends: [ .master-rules, pages-test ]

test:docker:images:
  extends: [.gitlab-draper_utilities_container_image_builder_any]
  rules:
    - if: $CI_COMMIT_BRANCH != 'master'
  variables:
    CIB_DOCKERFILE: "dockerfiles/Dockerfile.${IMAGE}"
    CIB_IMAGE_SUFFIX: ${SUFFIX}
    CIB_IMAGE_TAG: ${IMAGE_TAG}
  when: manual
  parallel:
    matrix:
      - IMAGE: [centos8]
        SUFFIX: [staging]
        IMAGE_TAG: ["centos8"]
        TARGET: ['']
      
      - IMAGE: [centos9]
        SUFFIX: [staging]
        IMAGE_TAG: ["centos9"]
        TARGET: ['']

      - IMAGE: [kali]
        SUFFIX: [staging]
        IMAGE_TAG: ["kali-latest"]
        TARGET: ['']
      
      - IMAGE: [klee]
        SUFFIX: [staging]
        IMAGE_TAG: ["klee-latest"]
        TARGET: ['']
      
      - IMAGE: [oracle8]
        SUFFIX: [staging]
        IMAGE_TAG: ["oracle8"]
        TARGET: ['']
      
      - IMAGE: [oracle9]
        SUFFIX: [staging]
        IMAGE_TAG: ["oracle9"]
        TARGET: ['']
      
      - IMAGE: [redhat8]
        SUFFIX: [staging]
        IMAGE_TAG: ["redhat8"]
        TARGET: ['']
      
      - IMAGE: [redhat9]
        SUFFIX: [staging]
        IMAGE_TAG: ["redhat9"]
        TARGET: ['']
      
      - IMAGE: [u20]
        SUFFIX: [staging]
        IMAGE_TAG: ["ubtuntu-20.04"]
        TARGET: ['']
      
      - IMAGE: [u22]
        SUFFIX: [staging]
        IMAGE_TAG: ["ubuntu-22.04"]
        TARGET: ['']

publish:docker:images:
  extends: [.gitlab-draper_utilities_container_image_builder_any]
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
      changes:
        paths:
          - "dockerfiles/Dockerfile.${IMAGE}"
  variables:
    CIB_DOCKERFILE: "dockerfiles/Dockerfile.${IMAGE}"
    CIB_IMAGE_SUFFIX: ${SUFFIX}
    CIB_IMAGE_TAG: ${IMAGE_TAG}
    CIB_PASSTHROUGH: ${TARGET}
  parallel:
    matrix:
      - IMAGE: [centos8]
        SUFFIX: [vmf]
        IMAGE_TAG: ["centos8"]
        TARGET: ['']
      - IMAGE: [centos8]
        SUFFIX: [prereqs_vmf, staging]
        IMAGE_TAG: ["centos8"]
        TARGET: ['--target aflpp']
      
      - IMAGE: [centos9]
        SUFFIX: [vmf]
        IMAGE_TAG: ["centos9"]
        TARGET: ['']
      - IMAGE: [centos9]
        SUFFIX: [prereqs_vmf, staging]
        IMAGE_TAG: ["centos9"]
        TARGET: ['--target aflpp']
    
      - IMAGE: [kali]
        SUFFIX: [vmf]
        IMAGE_TAG: ["kali-latest"]
        TARGET: ['']
      - IMAGE: [kali]
        SUFFIX: [prereqs_vmf, staging]
        IMAGE_TAG: ["kali-latest"]
        TARGET: ['--target aflpp']
    
      - IMAGE: [klee]
        SUFFIX: [vmf]
        IMAGE_TAG: ["klee-latest"]
        TARGET: ['']
      - IMAGE: [klee]
        SUFFIX: [prereqs_vmf, staging]
        IMAGE_TAG: ["klee-latest"]
        TARGET: ['--target aflpp']
    
      - IMAGE: [oracle8]
        SUFFIX: [vmf]
        IMAGE_TAG: ["oracle8"]
        TARGET: ['']
      - IMAGE: [oracle8]
        SUFFIX: [prereqs_vmf, staging]
        IMAGE_TAG: ["oracle8"]
        TARGET: ['--target aflpp']
    
      - IMAGE: [oracle9]
        SUFFIX: [vmf]
        IMAGE_TAG: ["oracle9"]
        TARGET: ['']
      - IMAGE: [oracle9]
        SUFFIX: [prereqs_vmf, staging]
        IMAGE_TAG: ["oracle9"]
        TARGET: ['--target aflpp']
    
      - IMAGE: [redhat8]
        SUFFIX: [vmf]
        IMAGE_TAG: ["redhat8"]
        TARGET: ['']
      - IMAGE: [redhat8]
        SUFFIX: [prereqs_vmf, staging]
        IMAGE_TAG: ["redhat8"]
        TARGET: ['--target aflpp']
    
      - IMAGE: [redhat9]
        SUFFIX: [vmf]
        IMAGE_TAG: ["redhat9"]
        TARGET: ['']
      - IMAGE: [redhat9]
        SUFFIX: [prereqs_vmf, staging]
        IMAGE_TAG: ["redhat9"]
        TARGET: ['--target aflpp']
    
      - IMAGE: [u20]
        SUFFIX: [vmf]
        IMAGE_TAG: ["ubtuntu-20.04"]
        TARGET: ['']
      - IMAGE: [u20]
        SUFFIX: [prereqs_vmf, staging]
        IMAGE_TAG: ["ubuntu-20.04"]
        TARGET: ['--target aflpp']
    
      - IMAGE: [u22]
        SUFFIX: [vmf]
        IMAGE_TAG: ["ubuntu-22.04"]
        TARGET: ['']
      - IMAGE: [u22]
        SUFFIX: [prereqs_vmf, staging]
        IMAGE_TAG: ["ubuntu-22.04"]
        TARGET: ['--target aflpp']


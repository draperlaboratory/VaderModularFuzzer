/* =============================================================================
 * Vader Modular Fuzzer (VMF)
 * Copyright (c) 2021-2024 The Charles Stark Draper Laboratory, Inc.
 * <vmf@draper.com>
 *  
 * Effort sponsored by the U.S. Government under Other Transaction number
 * W9124P-19-9-0001 between AMTC and the Government. The U.S. Government
 * Is authorized to reproduce and distribute reprints for Governmental purposes
 * notwithstanding any copyright notation thereon.
 *  
 * The views and conclusions contained herein are those of the authors and
 * should not be interpreted as necessarily representing the official policies
 * or endorsements, either expressed or implied, of the U.S. Government.
 *  
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 (only) as 
 * published by the Free Software Foundation.
 *  
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *  
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *  
 * @license GPL-2.0-only <https://spdx.org/licenses/GPL-2.0-only.html>
 * ===========================================================================*/
package com.draper.utilities;

import java.io.*;
import java.nio.file.*;
import java.util.zip.*;

import com.draper.services.corpus.CorpusServices;

public class ZipManager
{  
    private static final ZipManager      instance       = new ZipManager();
    private static final String          prefix         = "ZIPAUTOGEN_";
    
    /****************************************************************************************
     * Instance pattern for singleton
     *
     */
    static public ZipManager Instance()
    {       
        return instance;
    }
        
    /****************************************************************************************
     * Build a zipFile and return the filename
     *
     */
    public String[] zipFiles(String[] allFiles, int suffixId)
    {
        
        String[]  fileList = new String[1];
        String    base     = CorpusServices.Instance().getBasePath();
        String    zipName  = ZipManager.prefix + System.currentTimeMillis() + "_VMF" + suffixId + ".zip";
        String    zipFile  = base  + File.separator + zipName;
        
        try
        {
            FileOutputStream fos            = new FileOutputStream(zipFile);
            ZipOutputStream  zos            = new ZipOutputStream(fos);
 
            Logger.println(this, "Creating ZipFile: " + zipFile );
            
            for (String oneFile : allFiles)
            {
                if( oneFile.startsWith("ZIPAUTOGEN_") ) continue;
                
                zos.putNextEntry(new ZipEntry(new File(oneFile).getName()));

                byte[] bytes = Files.readAllBytes(Paths.get(base + File.separator + oneFile));
                
                zos.write(bytes, 0, bytes.length);
                
                zos.closeEntry();
            }

            zos.close();
            
            fileList[0] = zipName;                               
        }
        catch (FileNotFoundException ex)
        {
            Logger.println(this, "File does not exist: " + ex);
        }
        catch (IOException ex)
        {
            Logger.println(this, "I/O error: " + ex);
        }
                
        return fileList;
    }

    /****************************************************************************************
     * See if this file was generated by the ZipManager.
     *
     */
   public boolean Generated(String fileName)
    {
       boolean status = false;
       
       try
       {
           if( fileName.startsWith(ZipManager.prefix))  
           {
               status = true;
           }
       }
       catch (Exception ex)
       {
           Logger.println(this, "Error: " + ex);
       }
       
       return status;
    } 
}
